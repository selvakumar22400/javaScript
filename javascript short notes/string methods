JavaScript Strings

    => JavaScript strings are used for storing and manipulating text.


          Strings Can be Objects
          Normally, JavaScript strings are primitive values, created from literals:

          let firstName = "John";

          But strings can also be defined as objects with the keyword new:

          let firstName = new String("John");
          
 => String Length

          The length property returns the length of a string:

          Example
          let txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
          txt.length;
                    
          output :26
          
          
=> Extracting String Parts
      There are 3 methods for extracting a part of a string:

         -> slice(start, end)
         -> substring(start, end)
         -> substr(start, length)
  
         1. The slice() Method
            let str = "Apple, Banana, Kiwi";
            str.slice(7, 13)     // Returns Banana
            
          2.  let str = "Apple, Banana, Kiwi";
            str.slice(-12, -6)    // Returns Banana
            
          3.  str.slice(7);    // Returns Banana,Kiwi
            
          4.  str.slice(-12)    // Returns Banana,Kiwi
          
The substring() Method :
    substring() is similar to slice().
    The difference is that substring() cannot accept negative indexes.  
    
        let str = "Apple, Banana, Kiwi";
        substring(7, 13)    // Returns Banana
        
        If you omit the second parameter, substring() will slice out the rest of the string.
        
The substr() Method :

    substr() is similar to slice().
    The difference is that the second parameter specifies the length of the extracted part.

          Example
          let str = "Apple, Banana, Kiwi";
          str.substr(7, 6)    // Returns Banana   
          
          If you omit the second parameter, substr() will slice out the rest of the string.    

=> Replacing String Content:

   The replace() method replaces a specified value with another value in a string:

          Example
          let text = "Please visit Microsoft!";
          let newText = text.replace("Microsoft", "W3Schools");
          
   By default, the replace() method replaces only the first match:

          Example
          let text = "Please visit Microsoft and Microsoft!";
          let newText = text.replace("Microsoft", "W3Schools");

   By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:
           Example
           let text = "Please visit Microsoft!";
           let newText = text.replace("MICROSOFT", "W3Schools");
   
   To replace case insensitive, use a regular expression with an /i flag (insensitive):

            Example
            let text = "Please visit Microsoft!";
            let newText = text.replace(/MICROSOFT/i, "W3Schools");
            
            
=> Converting to Upper and Lower Case:
     A string is converted to upper case with toUpperCase():
              Example
              let text1 = "Hello World!";       // String
              let text2 = text1.toUpperCase();  // text2 is text1 converted to upper
              
      A string is converted to lower case with toLowerCase():

               Example
               let text1 = "Hello World!";       // String
               let text2 = text1.toLowerCase();  // text2 is text1 converted to lower
=>The concat() Method
     concat() joins two or more strings:

                Example
                let text1 = "Hello";
                let text2 = "World";
                let text3 = text1.concat(" ", text2);
                
                result - Hello World!
                
 =>String.trim()
     The trim() method removes whitespace from both sides of a string:

              Example
              let text = "       Hello World!        ";
              
=> Extracting String Characters
      There are 3 methods for extracting string characters:

          -> charAt(position)
          -> charCodeAt(position)
          -> Property access [ ]
      1. The charAt() Method
          The charAt() method returns the character at a specified index (position) in a string:
              Example
              let text = "HELLO WORLD";
              text.charAt(0)           // Returns H
              
      2. The charCodeAt() Method
          The charCodeAt() method returns the unicode of the character at a specified index in a string:
          The method returns a UTF-16 code (an integer between 0 and 65535).

              Example
              let text = "HELLO WORLD";
              text.charCodeAt(0)       // Returns 72
     3. Property Access
              ECMAScript 5 (2009) allows property access [ ] on strings:

              Example
              let text = "HELLO WORLD";
              text[0]                   // returns H
              
=> Converting a String to an Array
       A string can be converted to an array with the split() method:

              Example
              text.split(",")          // Split on commas
              text.split(" ")          // Split on spaces
              text.split("|")          // Split on pipe
        If the separator is omitted, the returned array will contain the whole string in index [0].
        If the separator is "", the returned array will be an array of single characters:

                Example
                text.split("")           // Split in characters
