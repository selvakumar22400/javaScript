JavaScript Array Iteration
Array iteration methods operate on every array item.

Array.forEach()
    The forEach() method calls a function (a callback function) once for each array element.

Array.map()
    The map() method creates a new array by " performing a function  on each array element ".
    The map() method does not execute the function for array elements without values.
    The map() method does not change the original array.
    
Array.filter()
    The filter() method creates a new array with array elements that passes a test.
    This example creates a new array from elements with a value larger than 18:
    
Array.reduce()
    The reduce() method runs a function on each array element to produce (reduce it to) a single value.
    The reduce() method works from left-to-right in the array. See also reduceRight().
    The reduce() method does not reduce the original array. 
    
        const numbers = [45, 4, 9, 16, 25];
        let sum = numbers.reduce(myFunction);
        function myFunction(total, value, index, array) {
          return total + value;
        }
          Note that the function takes 4 arguments:
              The total (the initial value / previously returned value)
              The item value
              The item index
              The array itself
              
Array.reduceRight()
      The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.
      The reduceRight() works from right-to-left in the array. See also reduce().
      The reduceRight() method does not reduce the original array.

Array.every()
      The every() method check if all array values pass a test.
      This example check if all array values are larger than 18:
        <script>
        const numbers = [45, 4, 9, 16, 25];
        let someOver18 = numbers.every(myFunction);
        document.getElementById("demo").innerHTML = "Some over 18 is " + someOver18;
        function myFunction(value, index, array) {
        return value > 18;
        }
        </script>
         result: Some over 18 is false
        
Array.some()
      The some() method check if some array values pass a test.
      This example check if some array values are larger than 18:

          <script>
          const numbers = [45, 4, 9, 16, 25];
          let someOver18 = numbers.some(myFunction);
          document.getElementById("demo").innerHTML = "Some over 18 is " + someOver18;
          function myFunction(value, index, array) {
            return value > 18;
          }
         </script>
       result: Some over 18 is true

Array.indexOf()
     The indexOf() method searches an array for an element value and returns its position.
 
          Syntax:array.indexOf(item, start)
            item	Required. The item to search for.
            start	Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.
            Array.indexOf() returns -1 if the item is not found.
            
Array.lastIndexOf()
     Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.    
     
Array.includes()
    syntax:array.includes(search-item)
      ECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).
      Example
        const fruits = ["Banana", "Orange", "Apple", "Mango"];  
          fruits.includes("Mango"); // is true    

Array.find()
      The find() method returns "the value of the first array element "that passes a test function.
      This example finds (returns the value of) the first element that is larger than 18:
        Example
          const numbers = [4, 9, 16, 25, 29];
          let first = numbers.find(myFunction);
          function myFunction(value, index, array) {
            return value > 18;
          } 
          
Array.findIndex()
      The findIndex() method returns " the index of the first array element " that passes a test function.
      This example finds the index of the first element that is larger than 18:
      Example
          const numbers = [4, 9, 16, 25, 29];
          let first = numbers.findIndex(myFunction);

          function myFunction(value, index, array) {
            return value > 18;
          } 
          
Array.from()
     The Array.from() method returns an Array object from any object with a length property or any iterable object. 
Array.Keys()
     The Array.keys() method returns an Array Iterator object with the keys of an array.     
